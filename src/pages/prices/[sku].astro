---
import "../../styles/global.css";
import skus from "../../data/skus.json";

let data;
let rakutenData;
let yahooData;
try {
  const url = new URL(
    import.meta.env.BASE_URL + "data/prices/today.json",
    Astro.site
  );
  const res = await fetch(url);
  if (res.ok) {
    data = await res.json();
  }
} catch {}
try {
  const url = new URL(
    import.meta.env.BASE_URL + "data/prices/today.rakuten.json",
    Astro.site
  );
  const res = await fetch(url);
  if (res.ok) {
    rakutenData = await res.json();
  }
} catch {}
try {
  const url = new URL(
    import.meta.env.BASE_URL + "data/prices/today.yahoo.json",
    Astro.site
  );
  const res = await fetch(url);
  if (res.ok) {
    yahooData = await res.json();
  }
} catch {}
const { sku } = Astro.params;
const skuInfo = skus.find(s => s.id === sku);
const priceInfo = data?.items?.find(i => i.skuId === sku);
const updatedJst = data?.updatedAt
  ? new Date(data.updatedAt).toLocaleDateString('en-CA', { timeZone: 'Asia/Tokyo' })
  : null;

const list = priceInfo?.list ? [...priceInfo.list].sort((a, b) => a.price - b.price) : [];
const rakutenList = rakutenData?.items?.find(i => i.skuId === sku)?.list?.sort((a, b) => a.price - b.price) ?? [];
const yahooList = yahooData?.items?.find(i => i.skuId === sku)?.list?.sort((a, b) => a.price - b.price) ?? [];
const allList = [
  ...rakutenList.map(it => ({ ...it, store: '楽天' })),
  ...yahooList.map(it => ({ ...it, store: 'Yahoo' }))
].sort((a, b) => a.price - b.price);
const sections = [
  { name: 'Rakuten', key: 'rakuten', list: rakutenList, status: data?.sourceStatus?.rakuten ?? 'fail' },
  { name: 'Yahoo', key: 'yahoo', list: yahooList, status: data?.sourceStatus?.yahoo ?? 'fail' }
];
const bestToday = list.length
  ? list.reduce((min, it) => (it.price < min.price ? it : min), list[0])
  : null;
let bestRecommended = priceInfo?.bestRecommended ?? null;
if (!bestRecommended && list.length && skuInfo?.brandHints?.length) {
  const cand = list.filter(it => {
    const title = it.title?.toLowerCase() ?? '';
    return skuInfo.brandHints.some(b => title.includes(b.toLowerCase()));
  });
  if (cand.length) {
    bestRecommended = cand.reduce((min, it) => (it.price < min.price ? it : min), cand[0]);
  }
}
function formatPrice(it) {
  if (!it) return '';
  return `${it.price}円`;
}

function formatSummary(it) {
  if (!it) return '';
  if (it.pointRate) {
    const eff = Math.round(it.price * (100 - it.pointRate) / 100);
    return `${formatPrice(it)}（ポイント${it.pointRate}%で実質${eff}円）`;
  }
  return formatPrice(it);
}

export function getStaticPaths() {
  return skus.map(s => ({ params: { sku: s.id } }));
}
---
<html lang="ja">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <base href={import.meta.env.BASE_URL} />
    <title>{skuInfo ? skuInfo.q : sku} – 価格一覧</title>
    <style>
      .badge{display:inline-block;padding:2px 6px;border-radius:4px;font-size:12px;color:#fff}
      .ok{background:#16a34a}
      .partial{background:#d97706}
      .fail{background:#dc2626}
      .tabs{display:flex;gap:4px;margin:1em 0}
      .tabs button{padding:4px 8px;border:1px solid #ccc;background:#f3f3f3;cursor:pointer}
      .tabs button.active{background:#ddd}
    </style>
  </head>
  <body>
    <div class="wrap">
        <a href="./" class="small">← トップ</a>
      <h1>{skuInfo ? skuInfo.q : sku} – 価格一覧</h1>
      <p>ショップ別の価格を一覧しています。並び順は目安（価格）です。</p>
      <p class="small">
        {data
          ? `取得日時: ${new Date(data.updatedAt).toLocaleString('ja-JP')}`
          : 'データ少'}
      </p>
      {skuInfo && (
        <div>
          <h2>仕様</h2>
          <ul>
            {skuInfo.filters && <li>フィルタ: {skuInfo.filters.join(', ')}</li>}
            {skuInfo.brandHints && <li>ブランド候補: {skuInfo.brandHints.join(', ')}</li>}
          </ul>
        </div>
      )}
      {priceInfo ? (
        <>
          <div>
            <h2>最安情報</h2>
            <ul>
              <li>今日の最安: {bestToday ? `${formatSummary(bestToday)} (${bestToday.shopName})` : 'データ少'}</li>
              {skuInfo?.brandHints?.length && (
                <li>
                  推奨安（ブランド一致優先）:
                  {bestRecommended
                    ? `${formatSummary(bestRecommended)} (${bestRecommended.shopName})`
                    : '該当なし'}
                </li>
              )}
            </ul>
          </div>
          <div class="tabs">
            <button data-tab="all" class="active">全ストア</button>
            <button data-tab="rakuten">楽天のみ</button>
            <button data-tab="yahoo">Yahooのみ</button>
          </div>
          <div class="price-section tab-content" data-tab="all">
            <h2>全ストア</h2>
            {allList.length ? (
              <>
                <button class="sort-toggle">実質価格順に切替</button>
                <table class="price-table">
                  <thead>
                    <tr>
                      <th>ストア</th>
                      <th>ショップ</th>
                      <th>価格</th>
                      <th>ポイント</th>
                      <th>実質価格<br/><span class="small">（ポイント考慮の試算）</span></th>
                    </tr>
                  </thead>
                  <tbody>
                    {allList.map(it => {
                      const eff = Math.floor(it.price * (100 - (it.pointRate ?? 0)) / 100);
                      return (
                        <tr data-price={it.price} data-eff={eff}>
                          <td>{it.store}</td>
                          <td>{it.shopName} <a href={it.itemUrl} target="_blank" rel="nofollow noopener">ショップで確認</a></td>
                          <td>{formatPrice(it)}</td>
                          <td>{it.pointRate ? `${it.pointRate}%` : '-'}</td>
                          <td>{eff}円</td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </>
            ) : (
              <p>データ少</p>
            )}
          </div>
          {sections.map(sec => (
            <div class="price-section tab-content" data-tab={sec.key} style="display:none">
              <h2>
                {sec.name}
                {sec.status !== 'ok' && (
                  <span class={`badge ${sec.status}`}>{sec.status}</span>
                )}
              </h2>
              {sec.list.length ? (
                <>
                  <button class="sort-toggle">実質価格順に切替</button>
                  <table class="price-table">
                    <thead>
                      <tr>
                        <th>ショップ</th>
                        <th>価格</th>
                        <th>ポイント</th>
                        <th>実質価格<br/><span class="small">（ポイント考慮の試算）</span></th>
                      </tr>
                    </thead>
                    <tbody>
                      {sec.list.map(it => {
                        const eff = Math.floor(it.price * (100 - (it.pointRate ?? 0)) / 100);
                        return (
                          <tr data-price={it.price} data-eff={eff}>
                            <td>{it.shopName} <a href={it.itemUrl} target="_blank" rel="nofollow noopener">ショップで確認</a></td>
                            <td>{formatPrice(it)}</td>
                            <td>{it.pointRate ? `${it.pointRate}%` : '-'}</td>
                            <td>{eff}円</td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </>
              ) : (
                <p>データ少</p>
              )}
            </div>
          ))}
          <p class="small">※実質価格はポイント考慮の試算</p>
          <p class="small">価格・在庫は常に変動します。購入前にリンク先で最新情報をご確認ください。</p>
          <h2>価格推移 (30日)</h2>
          <canvas id="chart" width="600" height="200" data-sku={sku}></canvas>
          <p id="chart-msg" class="small"></p>
          <p class="small">過去データはAPI仕様・収集失敗で欠損する場合があります。</p>
          <script>
            const tabButtons = document.querySelectorAll('.tabs button');
            const tabSections = document.querySelectorAll('.tab-content');
            tabButtons.forEach(btn => {
              btn.addEventListener('click', () => {
                const target = btn.dataset.tab;
                tabButtons.forEach(b => b.classList.toggle('active', b === btn));
                tabSections.forEach(sec => {
                  sec.style.display = sec.dataset.tab === target ? '' : 'none';
                });
              });
            });
          </script>
          <script>
            document.querySelectorAll('.price-section').forEach(sec => {
              const toggle = sec.querySelector('.sort-toggle');
              const tbody = sec.querySelector('tbody');
              if (!toggle || !tbody) return;
              const rows = Array.from(tbody.querySelectorAll('tr'));
              let byEff = false;
              function sortRows() {
                rows
                  .sort((a, b) => {
                    const k = byEff ? 'eff' : 'price';
                    return Number(a.dataset[k]) - Number(b.dataset[k]);
                  })
                  .forEach(r => tbody.appendChild(r));
              }
              toggle.addEventListener('click', () => {
                byEff = !byEff;
                sortRows();
                toggle.textContent = byEff ? '価格順に切替' : '実質価格順に切替';
              });
            });
          </script>
          <script>
            const canvas = document.getElementById('chart');
            const sku = canvas.dataset.sku;
            const msg = document.getElementById('chart-msg');
            const base = document.baseURI;
            fetch(`${base}data/price-history/${sku}.json?t=${Date.now()}`).then(r => r.json()).then(hist => {
              const list = Array.isArray(hist) ? hist : Object.values(hist).find(Array.isArray) || [];
              const data = list.filter(d => Number.isFinite(d.price)).slice(-30);
              if (data.length < 2) {
                canvas.style.display = 'none';
                msg.textContent = 'データ少';
                return;
              }
              const ctx = canvas.getContext('2d');
              const prices = data.map(d => d.price);
              const min = Math.min(...prices);
              const max = Math.max(...prices);
              const range = max - min || 1;
              ctx.beginPath();
              data.forEach((p, i) => {
                const x = i * (canvas.width / (data.length - 1));
                const y = canvas.height - (p.price - min) / range * canvas.height;
                if (i === 0) ctx.moveTo(x, y); else ctx.lineTo(x, y);
              });
              ctx.strokeStyle = '#0070f3';
              ctx.stroke();
            }).catch(() => {
              canvas.style.display = 'none';
              msg.textContent = 'データ少';
            });
          </script>
        </>
      ) : (
        <p>データ少</p>
      )}
    </div>
    <footer class="small">
      {updatedJst ? `最終更新: ${updatedJst} JST` : ''}
    </footer>
  </body>
</html>
