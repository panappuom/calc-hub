---
import "../../styles/global.css";
import Footer from "../../components/Footer.astro";
import skus from "../../data/skus.json";
import { safeBreak } from "../../lib/safe-break";
const IS_DEV = import.meta.env.DEV;
const BASE_URL = import.meta.env.BASE_URL;
const clientGlobalsScript = `window.__APP_DEV__ = ${JSON.stringify(IS_DEV)};\nwindow.__BASE_URL__ = ${JSON.stringify(BASE_URL)};`;

let data;
let rakutenData;
let yahooData;
try {
  const url = new URL(
    BASE_URL + "data/prices/today.json",
    Astro.site
  );
  const res = await fetch(url);
  if (res.ok) {
    data = await res.json();
  }
} catch {}
try {
  const url = new URL(
    BASE_URL + "data/prices/today.rakuten.json",
    Astro.site
  );
  const res = await fetch(url);
  if (res.ok) {
    rakutenData = await res.json();
  }
} catch {}
try {
  const url = new URL(
    BASE_URL + "data/prices/today.yahoo.json",
    Astro.site
  );
  const res = await fetch(url);
  if (res.ok) {
    yahooData = await res.json();
  }
} catch {}
const { sku } = Astro.params;
const skuInfo = skus.find(s => s.id === sku);
const priceInfo = data?.items?.find(i => i.skuId === sku);
function getEffectivePriceValue(it) {
  const price = Number(it?.price);
  if (!Number.isFinite(price)) {
    return Number.POSITIVE_INFINITY;
  }
  const pointRate = Number(it?.pointRate ?? 0);
  if (!Number.isFinite(pointRate) || pointRate <= 0) {
    return Math.floor(price);
  }
  return Math.floor(price * (100 - pointRate) / 100);
}

function withEffectivePrice(it) {
  return {
    ...it,
    effective: getEffectivePriceValue(it)
  };
}

const list = priceInfo?.list ? priceInfo.list.map(withEffectivePrice).sort((a, b) => a.effective - b.effective) : [];
const rakutenSource = rakutenData?.items?.find(i => i.skuId === sku)?.list ?? [];
const yahooSource = yahooData?.items?.find(i => i.skuId === sku)?.list ?? [];
const rakutenList = rakutenSource.map(withEffectivePrice).sort((a, b) => a.effective - b.effective);
const yahooList = yahooSource.map(withEffectivePrice).sort((a, b) => a.effective - b.effective);
const allList = [
  ...rakutenList.map(it => ({ ...it, store: '楽天' })),
  ...yahooList.map(it => ({ ...it, store: 'Yahoo' }))
].sort((a, b) => a.effective - b.effective);
const hasAllPoints = allList.some(it => Number(it.pointRate) > 0);
const sections = [
  { name: '楽天', key: 'rakuten', list: rakutenList, status: data?.sourceStatus?.rakuten ?? 'fail', hasPoints: rakutenList.some(it => Number(it.pointRate) > 0) },
  { name: 'Yahoo', key: 'yahoo', list: yahooList, status: data?.sourceStatus?.yahoo ?? 'fail', hasPoints: yahooList.some(it => Number(it.pointRate) > 0) }
];
const statusMessages = {
  partial: 'このソースの一部データが取得できませんでした。表示は最新の取得分です。',
  fail: 'このソースの取得に失敗しました。別ソースまたは前回データで表示しています。'
};
const bestToday = allList.length
  ? allList[0]
  : (list.length ? list.reduce((min, it) => (it.effective < min.effective ? it : min), list[0]) : null);
let bestRecommended = priceInfo?.bestRecommended ?? null;
if (!bestRecommended && list.length && skuInfo?.brandHints?.length) {
  const cand = list.filter(it => {
    const title = it.title?.toLowerCase() ?? '';
    return skuInfo.brandHints.some(b => title.includes(b.toLowerCase()));
  });
  if (cand.length) {
    bestRecommended = cand.reduce((min, it) => (it.effective < min.effective ? it : min), cand[0]);
  }
}
if (bestRecommended) {
  bestRecommended = { ...bestRecommended, effective: Number.isFinite(bestRecommended.effective) ? bestRecommended.effective : getEffectivePriceValue(bestRecommended) };
}
const bestTodayCard = getPriceCardModel(bestToday, { prefix: '最安' });
const bestRecommendedCard = getPriceCardModel(bestRecommended, { prefix: '推奨' });
function formatCurrency(value) {
  const num = Number(value);
  if (!Number.isFinite(num)) return '';
  return `${Math.round(num).toLocaleString('ja-JP')}円`;
}

function formatPrice(it) {
  if (!it) return '';
  return formatCurrency(it.price);
}

function getShopLinkDescription(name) {
  if (!name) {
    return 'ショップで商品の詳細を確認できます（新しいタブで開きます）';
  }
  return `${name}で商品の詳細を確認できます（新しいタブで開きます）`;
}

function truncateShopName(name, maxLength = 20) {
  if (!name) return '';
  if (name.length <= maxLength) {
    return name;
  }
  return `${name.slice(0, maxLength)}…`;
}

function getPriceCardModel(item, { prefix }) {
  if (!item) return null;
  const rawPrice = Number(item.price);
  if (!Number.isFinite(rawPrice) || rawPrice <= 0) {
    return null;
  }

  const effectiveValue = Number.isFinite(item.effective) ? item.effective : getEffectivePriceValue(item);
  const pointRate = Number(item.pointRate ?? 0);
  const priceText = formatCurrency(rawPrice);
  const hasEffectiveLine = Number.isFinite(effectiveValue) && effectiveValue > 0 && effectiveValue !== rawPrice;
  const effectiveText = hasEffectiveLine ? formatCurrency(effectiveValue) : null;

  const resolvedName = item.shopName ?? '';
  const displayNameSource = resolvedName || 'ショップ';

  return {
    hasEffectiveLine,
    prefix,
    primaryValue: hasEffectiveLine ? effectiveText : priceText,
    primaryAriaLabel: hasEffectiveLine ? `実質価格 ${effectiveText}` : `通常価格 ${priceText}`,
    secondaryPrice: priceText,
    secondaryPriceAriaLabel: `通常価格 ${priceText}`,
    hasPoints: hasEffectiveLine && pointRate > 0,
    pointRateText: `${pointRate}%`,
    pointRateAriaLabel: `ポイント還元率 ${pointRate}%`,
    shopName: resolvedName,
    shopDisplayName: truncateShopName(displayNameSource),
    shopTitle: resolvedName || undefined,
    itemUrl: item.itemUrl
  };
}

function getStoreBadgeClass(store) {
  if (store === '楽天') {
    return 'store-badge store-badge--rakuten';
  }
  if (typeof store === 'string' && store.toLowerCase() === 'yahoo') {
    return 'store-badge store-badge--yahoo';
  }
  return 'store-badge';
}

export function getStaticPaths() {
  return skus.map(s => ({ params: { sku: s.id } }));
}
---
<html lang="ja">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <base href={BASE_URL} />
    <script is:inline set:html={clientGlobalsScript}></script>
    <title>{skuInfo ? skuInfo.q : sku} – 価格一覧</title>
  </head>
  <body>
    <div class="wrap">
        <a href="./" class="small">← トップ</a>
      <h1 set:html={safeBreak(`${skuInfo ? skuInfo.q : sku} – 価格一覧`)}></h1>
      <p class="jp-copy">ショップ別の価格を一覧しています。並び順は <span class="nobr">目安（価格）です。</span></p>
      <p class="small jp-copy">
        {data
          ? `取得日時: ${new Date(data.updatedAt).toLocaleString('ja-JP')}`
          : 'データ少'}
      </p>
      {skuInfo && (
        <div>
          <h2 set:html={safeBreak("仕様")}></h2>
          <ul>
            {skuInfo.filters && <li>フィルタ: {skuInfo.filters.join(', ')}</li>}
            {skuInfo.brandHints && <li>ブランド候補: {skuInfo.brandHints.join(', ')}</li>}
          </ul>
        </div>
      )}
      {priceInfo ? (
        <>
          <div class="best-price">
            <h2 set:html={safeBreak("最安情報")}></h2>
            <div class="best-price-cards">
              <section class="best-price-card" role="region" aria-labelledby="best-today-heading">
                <p class="best-price-card__label" id="best-today-heading">推奨最安（ブランド一致）</p>
                {bestTodayCard ? (
                  <>
                    <p class="best-price-card__line best-price-card__line--primary">
                      <span class="best-price-card__value" aria-label={bestTodayCard.primaryAriaLabel}>{bestTodayCard.primaryValue}</span>
                    </p>
                    {bestTodayCard.hasEffectiveLine && (
                      <p class="best-price-card__line best-price-card__line--secondary">
                        <span aria-label={bestTodayCard.secondaryPriceAriaLabel}>通常 {bestTodayCard.secondaryPrice}</span>
                        {bestTodayCard.hasPoints && (
                          <>
                            <span aria-hidden="true"> / </span>
                            <span aria-label={bestTodayCard.pointRateAriaLabel}>ポイント {bestTodayCard.pointRateText}</span>
                          </>
                        )}
                      </p>
                    )}
                    {bestTodayCard.itemUrl && (
                      <p class="best-price-card__line best-price-card__line--link">
                        <a
                          href={bestTodayCard.itemUrl}
                          target="_blank"
                          rel="nofollow noopener"
                          class="best-price-card__link"
                          title={bestTodayCard.shopTitle}
                          aria-label={getShopLinkDescription(bestTodayCard.shopName || bestTodayCard.shopDisplayName)}
                        >
                          {bestTodayCard.shopDisplayName} で確認 <span aria-hidden="true">↗</span>
                        </a>
                      </p>
                    )}
                  </>
                ) : (
                  <p class="best-price-card__line best-price-card__line--empty">データ少</p>
                )}
              </section>
              {skuInfo?.brandHints?.length ? (
                <section class="best-price-card" role="region" aria-labelledby="best-recommended-heading">
                  <p class="best-price-card__label" id="best-recommended-heading">推奨最安（ブランド一致）</p>
                  {bestRecommendedCard ? (
                    <>
                      <p class="best-price-card__line best-price-card__line--primary">
                        <span class="best-price-card__value" aria-label={bestRecommendedCard.primaryAriaLabel}>{bestRecommendedCard.primaryValue}</span>
                      </p>
                      {bestRecommendedCard.hasEffectiveLine && (
                        <p class="best-price-card__line best-price-card__line--secondary">
                          <span aria-label={bestRecommendedCard.secondaryPriceAriaLabel}>通常 {bestRecommendedCard.secondaryPrice}</span>
                          {bestRecommendedCard.hasPoints && (
                            <>
                              <span aria-hidden="true"> / </span>
                              <span aria-label={bestRecommendedCard.pointRateAriaLabel}>ポイント {bestRecommendedCard.pointRateText}</span>
                            </>
                          )}
                        </p>
                      )}
                      {bestRecommendedCard.itemUrl && (
                        <p class="best-price-card__line best-price-card__line--link">
                          <a
                            href={bestRecommendedCard.itemUrl}
                            target="_blank"
                            rel="nofollow noopener"
                            class="best-price-card__link"
                            title={bestRecommendedCard.shopTitle}
                            aria-label={getShopLinkDescription(bestRecommendedCard.shopName || bestRecommendedCard.shopDisplayName)}
                          >
                            {bestRecommendedCard.shopDisplayName} で確認 <span aria-hidden="true">↗</span>
                          </a>
                        </p>
                      )}
                    </>
                  ) : (
                    <p class="best-price-card__line best-price-card__line--empty">該当なし</p>
                  )}
                </section>
              ) : null}
            </div>
          </div>
          <div class="tabs">
            <button type="button" data-tab="all" class="active">全ストア</button>
            <button type="button" data-tab="rakuten">楽天のみ</button>
            <button type="button" data-tab="yahoo">Yahooのみ</button>
          </div>
          <div class="price-section tab-content" data-tab="all">
            <h2 class="sr-only" set:html={safeBreak("全ストア")}></h2>
            {allList.length ? (
              <>
                {hasAllPoints && <button class="sort-toggle">価格順に切替</button>}
                <table class="price-table">
                  <thead class="sr-only">
                    <tr>
                      <th id="col-all-store" scope="col">ストア</th>
                      <th id="col-all-shop" scope="col">ショップ</th>
                      <th id="col-all-price" scope="col" data-column="price">価格</th>
                      <th id="col-all-point" scope="col" data-column="points">ポイント</th>
                      <th id="col-all-eff" scope="col" data-column="effective">実質価格<br/><span class="small">（ポイント込み）</span></th>
                      <th id="col-all-action" scope="col" data-column="action" class="sr-only">ショップで確認</th>
                    </tr>
                  </thead>
                  <tbody>
                    {allList.map(it => {
                      const eff = Number.isFinite(it.effective) ? it.effective : getEffectivePriceValue(it);
                      const hasPointRate = Number(it.pointRate ?? 0) > 0;
                      return (
                        <tr class="has-store-badge" data-price={it.price} data-eff={eff}>
                          <td
                            headers="col-all-store"
                            data-label="ストア"
                            data-cell="store"
                          >
                            <span class={getStoreBadgeClass(it.store)}>{it.store}</span>
                          </td>
                          <td headers="col-all-shop" data-label="ショップ" data-cell="shop">
                            <span class="shop-name" title={it.shopName}>
                              {it.shopName}
                            </span>
                          </td>
                          <td
                            headers="col-all-price"
                            data-label="価格"
                            data-cell="price"
                            class={!hasPointRate ? 'is-muted' : undefined}
                          >
                            {formatPrice(it)}
                          </td>
                          <td headers="col-all-point" data-label="ポイント" data-cell="points">{hasPointRate ? `${it.pointRate}%` : '-'}</td>
                          <td headers="col-all-eff" data-label="実質価格" data-cell="effective">{formatCurrency(eff)}</td>
                          <td
                            headers="col-all-action"
                            data-label="ショップで確認"
                            data-cell="action"
                          >
                            <a
                              class="shop-link-button"
                              href={it.itemUrl}
                              target="_blank"
                              rel="nofollow noopener"
                              title={getShopLinkDescription(it.shopName)}
                              aria-label={getShopLinkDescription(it.shopName)}
                            >
                              ショップで確認
                              <span aria-hidden="true" class="external-link-icon">↗</span>
                            </a>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </>
            ) : (
              <p>データ少</p>
            )}
          </div>
          {sections.map(sec => (
            <div class="price-section tab-content" data-tab={sec.key} data-source-status={sec.status} style="display:none">
              <h2 class="sr-only" set:html={safeBreak(sec.name)}></h2>
              {sec.status !== 'ok' && (
                <span class="status-icon--warn" aria-label={statusMessages[sec.status]} title={statusMessages[sec.status]}>⚠️</span>
              )}
              {sec.list.length ? (
              <>
                  {sec.hasPoints && <button class="sort-toggle">価格順に切替</button>}
                  <table class="price-table">
                    <thead class="sr-only">
                      <tr>
                        <th id={`col-${sec.key}-shop`} scope="col">ショップ</th>
                        <th id={`col-${sec.key}-price`} scope="col" data-column="price">価格</th>
                        <th id={`col-${sec.key}-point`} scope="col" data-column="points">ポイント</th>
                        <th id={`col-${sec.key}-eff`} scope="col" data-column="effective">実質価格<br/><span class="small">（ポイント込み）</span></th>
                        <th id={`col-${sec.key}-action`} scope="col" data-column="action" class="sr-only">ショップで確認</th>
                      </tr>
                    </thead>
                    <tbody>
                      {sec.list.map(it => {
                        const eff = Number.isFinite(it.effective) ? it.effective : getEffectivePriceValue(it);
                        const hasPointRate = Number(it.pointRate ?? 0) > 0;
                        return (
                          <tr data-price={it.price} data-eff={eff}>
                            <td headers={`col-${sec.key}-shop`} data-label="ショップ" data-cell="shop">
                              <span class="shop-name" title={it.shopName}>
                                {it.shopName}
                              </span>
                            </td>
                            <td
                              headers={`col-${sec.key}-price`}
                              data-label="価格"
                              data-cell="price"
                              class={!hasPointRate ? 'is-muted' : undefined}
                            >
                              {formatPrice(it)}
                            </td>
                            <td headers={`col-${sec.key}-point`} data-label="ポイント" data-cell="points">{hasPointRate ? `${it.pointRate}%` : '-'}</td>
                            <td headers={`col-${sec.key}-eff`} data-label="実質価格" data-cell="effective">{formatCurrency(eff)}</td>
                            <td
                              headers={`col-${sec.key}-action`}
                              data-label="ショップで確認"
                              data-cell="action"
                            >
                              <a
                                class="shop-link-button"
                                href={it.itemUrl}
                                target="_blank"
                                rel="nofollow noopener"
                                title={getShopLinkDescription(it.shopName)}
                                aria-label={getShopLinkDescription(it.shopName)}
                              >
                                ショップで確認
                                <span aria-hidden="true" class="external-link-icon">↗</span>
                              </a>
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </>
              ) : (
                <p>データ少</p>
              )}
            </div>
          ))}
          <p class="small jp-copy">※実質価格はポイント考慮の試算です。</p>
          <p class="small jp-copy">価格・在庫は常に変動します。購入前にリンク先で最新情報をご確認ください。</p>
          <h2 set:html={safeBreak("価格推移 (30日)")}></h2>
          <div class="chart-container">
            <canvas id="chart" data-sku={sku}></canvas>
          </div>
          <p id="chart-msg" class="small"></p>
          <pre id="chart-debug" class="small" style="display:none" aria-live="polite"></pre>
          <p class="small jp-copy">過去データはAPI仕様・収集失敗で欠損する場合があります。</p>
          <script>
            const tabButtons = document.querySelectorAll('.tabs button');
            const tabSections = document.querySelectorAll('.tab-content');
            tabButtons.forEach(btn => {
              btn.addEventListener('click', () => {
                const target = btn.dataset.tab;
                tabButtons.forEach(b => b.classList.toggle('active', b === btn));
                tabSections.forEach(sec => {
                  sec.style.display = sec.dataset.tab === target ? '' : 'none';
                });
              });
            });
          </script>
          <script>
            document.querySelectorAll('.price-section').forEach(sec => {
              const toggle = sec.querySelector('.sort-toggle');
              const tbody = sec.querySelector('tbody');
              if (!toggle || !tbody) return;
              const rows = Array.from(tbody.querySelectorAll('tr'));
              let byEff = true;
              function sortRows() {
                rows
                  .sort((a, b) => {
                    const k = byEff ? 'eff' : 'price';
                    return Number(a.dataset[k]) - Number(b.dataset[k]);
                  })
                  .forEach(r => tbody.appendChild(r));
              }
              function updateLabel() {
                toggle.textContent = byEff ? '価格順に切替' : '実質価格順に切替';
              }
              updateLabel();
              sortRows();
              toggle.addEventListener('click', () => {
                byEff = !byEff;
                sortRows();
                updateLabel();
              });
            });
          </script>
          <script>
            const canvas = document.getElementById('chart');
            const msg = document.getElementById('chart-msg');
            const debug = document.getElementById('chart-debug');

            if (canvas && msg) {
              const sku = canvas.dataset.sku;
              let chartData = null;

              function showDebug(message, { temporary = false } = {}) {
                if (!debug) return;
                debug.textContent = message;
                debug.style.display = message ? '' : 'none';
                if (temporary && message) {
                  setTimeout(() => {
                    if (debug.textContent === message) {
                      debug.textContent = '';
                      debug.style.display = 'none';
                    }
                  }, 5000);
                }
              }

              function showNoData(reason, { hideCanvas = true } = {}) {
                canvas.style.display = hideCanvas ? 'none' : '';
                msg.textContent = 'データ少';
                if (reason) {
                  console.warn('showNoData', reason);
                  if (debug && !debug.textContent) {
                    showDebug(reason);
                  }
                }
              }

              function renderChart() {
                if (!chartData || chartData.length < 2) return;
                const rect = canvas.getBoundingClientRect();
                const clientWidth = canvas.clientWidth;
                const clientHeight = canvas.clientHeight;
                const offsetWidth = canvas.offsetWidth;
                const offsetHeight = canvas.offsetHeight;
                const width = rect.width;
                const height = rect.height;
                const dpr = window.devicePixelRatio || 1;
                canvas.width = Math.round(width * dpr);
                canvas.height = Math.round(height * dpr);
                if (window.__APP_DEV__) {
                  console.log('chart canvas dimensions', {
                    clientWidth,
                    clientHeight,
                    offsetWidth,
                    offsetHeight,
                    cssWidth: width,
                    cssHeight: height,
                    canvasWidth: canvas.width,
                    canvasHeight: canvas.height,
                  });
                }
                if (
                  !clientWidth ||
                  !clientHeight ||
                  !offsetWidth ||
                  !offsetHeight ||
                  !width ||
                  !height ||
                  !canvas.width ||
                  !canvas.height
                ) {
                  showNoData('zero-size canvas', { hideCanvas: false });
                  return;
                }
                const ctx = canvas.getContext('2d');
                if (!ctx) return;
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                const prices = chartData.map(d => d.price);
                const min = Math.min(...prices);
                const max = Math.max(...prices);
                const range = max - min || 1;
                ctx.beginPath();
                chartData.forEach((p, i) => {
                  const x = i * (canvas.width / (chartData.length - 1));
                  const y = canvas.height - (p.price - min) / range * canvas.height;
                  if (i === 0) ctx.moveTo(x, y); else ctx.lineTo(x, y);
                });
                ctx.strokeStyle = '#0070f3';
                ctx.lineWidth = Math.max(1, dpr);
                ctx.stroke();
                  msg.textContent = '';
              }

              function handleResize() {
                if (!chartData || chartData.length < 2) return;
                renderChart();
              }

              window.addEventListener('resize', handleResize);

              async function loadChart() {
                try {
                  const url = new URL(
                    `data/price-history/${sku}.json?t=${Date.now()}`,
                    document.baseURI,
                  );
                  showDebug(url.toString());
                  const res = await fetch(url);
                  if (!res.ok) {
                    const message = `HTTP ${res.status} ${url.toString()}`;
                    console.error(message);
                    showDebug(message);
                    showNoData();
                    return;
                  }
                  const hist = await res.json();
                  const list = Array.isArray(hist) ? hist : Object.values(hist).find(Array.isArray) || [];
                  const filtered = list.filter(d => Number.isFinite(d.price)).slice(-30);
                  if (filtered.length < 2) {
                    showNoData();
                    return;
                  }
                  chartData = filtered;
                  canvas.style.display = '';
                  msg.textContent = '';
                  showDebug(url.toString());
                  renderChart();
                } catch (err) {
                  console.error(err);
                  showNoData();
                  if (window.__APP_DEV__) {
                    const error = err instanceof Error ? err : new Error(String(err));
                    const stackLine = typeof error.stack === 'string' ? error.stack.split('\n')[1]?.trim() : '';
                    const info = stackLine ? `${error.message} @ ${stackLine}` : error.message;
                    showDebug(info, { temporary: true });
                  }
                }
              }

              loadChart();
            }
          </script>
        </>
      ) : (
        <p>データ少</p>
      )}
    </div>
    <Footer />
  </body>
</html>
