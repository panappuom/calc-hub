---
import Layout from "../layouts/Layout.astro";
import Footer from "../components/Footer.astro";
import data from "../data/deals.json";
import rssSources from "../../data-sources/rss.json";
import { safeBreak } from "../lib/safe-break";
import { guessSkuFromDeal } from "../lib/sku-map.mjs";
import { buildLink } from "../../scripts/link-builder.mjs";

const items = (data?.items ?? []).slice(0, 100);

const dtf = new Intl.DateTimeFormat("ja-JP", {
  timeZone: "Asia/Tokyo",
  year: "numeric",
  month: "2-digit",
  day: "2-digit",
  hour: "2-digit",
  minute: "2-digit"
});

function fmt(value) {
  try {
    return dtf.format(new Date(value));
  } catch {
    return value;
  }
}

function normalizeHost(host = "") {
  return host.toLowerCase().replace(/^www\./, "");
}

function extractSourceHints(feedUrl = "") {
  const hints = new Set();
  try {
    const url = new URL(feedUrl);
    if (url.hostname && url.hostname !== "news.google.com") {
      hints.add(normalizeHost(url.hostname));
    }
  } catch {
    /* noop */
  }
  const matches = feedUrl.matchAll(/site:([a-z0-9.-]+)/gi);
  for (const match of matches) {
    const host = match?.[1];
    if (host) {
      hints.add(normalizeHost(host));
    }
  }
  return [...hints];
}

const sourceTagMap = new Map();
for (const feed of rssSources ?? []) {
  const tags = Array.isArray(feed?.tags) ? feed.tags : [];
  if (!tags.length) continue;
  const hints = extractSourceHints(feed?.url ?? "");
  hints.forEach((hint) => {
    const existing = sourceTagMap.get(hint) ?? new Set();
    tags.forEach((tag) => existing.add(tag));
    sourceTagMap.set(hint, existing);
  });
}

function tagsForSource(source = "") {
  const host = normalizeHost(source);
  if (!host) return [];
  const segments = host.split(".");
  for (let i = 0; i < segments.length - 1; i += 1) {
    const candidate = segments.slice(i).join(".");
    const result = sourceTagMap.get(candidate);
    if (result) {
      return [...result];
    }
  }
  return [];
}

function toTimestamp(value) {
  const d = new Date(value);
  const t = d.getTime();
  if (Number.isNaN(t)) return Date.now();
  return t;
}

function toAnalyticsPayload(item, index, tagList) {
  const payload = {
    url: item.link?.href ?? item.url ?? "",
    source_domain: "",
    tags: tagList.join(","),
    position: index + 1,
  };

  try {
    const url = new URL(item.url ?? item.link?.href ?? "");
    payload.source_domain = url.hostname ?? "";
  } catch {
    payload.source_domain = "";
  }

  try {
    const trackingUrl = new URL(item.link?.href ?? "");
    const source = trackingUrl.searchParams.get("utm_source");
    const medium = trackingUrl.searchParams.get("utm_medium");
    const campaign = trackingUrl.searchParams.get("utm_campaign");
    if (source) payload.utm_source = source;
    if (medium) payload.utm_medium = medium;
    if (campaign) payload.utm_campaign = campaign;
  } catch {
    /* noop */
  }

  return JSON.stringify(payload);
}

const DAY_MS = 1000 * 60 * 60 * 24;
const now = Date.now();

const enrichedItems = items
  .map((it) => {
    const timestamp = toTimestamp(it.publishedAt);
    const combinedTags = new Set([...(it.tags ?? []), ...tagsForSource(it.source)]);
    const link = buildLink(it.url);
    let sourceDomain = "";
    try {
      const url = new URL(it.url ?? it.link?.href ?? "");
      sourceDomain = url.hostname ?? "";
    } catch {
      sourceDomain = it.source ?? "";
    }
    const tagList = [...combinedTags];
    const sku = guessSkuFromDeal({
      title: it.title ?? "",
      summary: it.summary ?? "",
      tags: tagList,
      source: sourceDomain || it.source || "",
    });
    return {
      ...it,
      tags: tagList,
      timestamp,
      publishedLabel: fmt(it.publishedAt),
      isNew: now - timestamp <= DAY_MS,
      link,
      sourceDomain,
      sku,
    };
  })
  .sort((a, b) => b.timestamp - a.timestamp);

const allTags = Array.from(
  new Set(enrichedItems.flatMap((it) => it.tags ?? []))
).sort((a, b) => a.localeCompare(b, "ja"));

const canonicalUrl = Astro.site ? new URL('./deals/', Astro.site).href : undefined;

const dealsStructuredData = {
  '@context': 'https://schema.org',
  '@type': 'ItemList',
  name: '今日のセール・割引まとめ',
  description: '主要サイトの公式情報から毎日自動で集めています。ノイズ（求人・PR等）は除外。',
  url: canonicalUrl,
  numberOfItems: enrichedItems.length,
  itemListElement: enrichedItems.map((item, index) => {
    const url = item.link?.href ?? item.url ?? '';
    const hasNewsArticleRequirements = Boolean(
      item.image && item.source && item.publishedAt
    );

    const article = hasNewsArticleRequirements
      ? {
          '@type': 'NewsArticle',
          name: item.title ?? '',
          headline: item.title ?? '',
          url,
          datePublished: item.publishedAt,
          image: item.image,
          author: {
            '@type': 'Organization',
            name: item.source
          },
          publisher: {
            '@type': 'Organization',
            name: item.source
          }
        }
      : {
          '@type': 'WebPage',
          name: item.title ?? '',
          url
        };

    if (item.summary) {
      article.description = item.summary;
    }

    if (item.publishedAt && !article.datePublished) {
      article.datePublished = item.publishedAt;
    }

    if (item.image && !article.image) {
      article.image = item.image;
    }

    if (item.source && !article.publisher) {
      article.publisher = {
        '@type': 'Organization',
        name: item.source
      };
    }

    const entry = {
      '@type': 'ListItem',
      position: index + 1,
      url,
      name: item.title ?? '',
      item: article
    };

    if (item.tags?.length) {
      entry.keywords = item.tags.join(', ');
    }

    return entry;
  })
};

const dealsSchemaJson = JSON.stringify(dealsStructuredData, null, 2);
---
<Layout title="今日のセール・割引まとめ">
  <Fragment slot="head">
    <script type="application/ld+json" data-schema="deal-list" set:html={dealsSchemaJson}></script>
  </Fragment>
  <div class="wrap">
      <a href="./" class="small">← トップ</a>
      <h1 set:html={safeBreak("今日のセール・割引まとめ")}></h1>
      <p class="small jp-copy">主要サイトの公式情報から毎日自動で集めています。ノイズ（求人・PR等）は除外。</p>

      <section class="deal-controls" aria-label="並び順とタグフィルタ">
        <div class="deal-sort" role="group" aria-label="並び順">
          <button type="button" class="deal-sort__button is-active" data-sort-button data-sort="new" aria-pressed="true">
            新着順
          </button>
          <button
            type="button"
            class="deal-sort__button"
            data-sort-button
            data-sort="popular"
            aria-pressed="false"
            aria-disabled="true"
            title="人気順は近日公開予定"
          >
            人気（クリック数）
          </button>
        </div>
        <div class="deal-filter">
          <p class="deal-filter__label">タグで絞り込み</p>
          <div class="deal-filter__chips">
            {allTags.map((tag) => (
              <button type="button" class="deal-tag" data-tag-filter data-tag={tag} aria-pressed="false">
                {tag}
              </button>
            ))}
          </div>
        </div>
      </section>

      <p class="small jp-copy" data-deal-count>{`全${enrichedItems.length}件`}</p>

      <ul class="deal-list" data-deal-list>
        {enrichedItems.map((it, index) => {
          const tagList = (it.tags ?? []).filter(Boolean);
          const analyticsPayload = toAnalyticsPayload(it, index, tagList);
          const dealToPricePayload = it.sku
            ? JSON.stringify({
                sku: it.sku,
                source_domain: it.sourceDomain ?? "",
                index: index + 1,
              })
            : null;
          return (
            <li
              class="deal-list__item"
              data-deal-item
              data-tags={tagList.join("|")}
              data-timestamp={it.timestamp}
            >
              <a
                class="deal-card"
                href={it.link.href}
                target={it.link.target}
                rel={it.link.rel}
                title={`${it.source}で詳細を確認できます（新しいタブが開きます）`}
                data-analytics="deal_click"
                data-analytics-payload={analyticsPayload}
              >
                <div class="deal-card__header">
                  <div class="deal-card__badge-row">
                    {it.isNew && <span class="deal-badge" aria-label="24時間以内に追加">新着</span>}
                    <span class="deal-card__domain">{it.source}</span>
                  </div>
                  <h2 class="deal-card__title" set:html={safeBreak(it.title)}></h2>
                </div>
                <div class="deal-card__meta">
                  <time dateTime={it.publishedAt}>{it.publishedLabel}</time>
                </div>
                {tagList.length > 0 && (
                  <ul class="deal-card__tags" aria-label="タグ">
                    {tagList.map((tag) => (
                      <li class="deal-card__tag">{tag}</li>
                    ))}
                  </ul>
                )}
                {it.summary && <p class="deal-card__summary jp-copy">{it.summary}</p>}
              </a>
              {it.sku && (
                <div class="deal-card__actions">
                  <a
                    class="deal-card__action"
                    href={`./prices/${it.sku}/`}
                    data-analytics="deal_to_price"
                    data-analytics-payload={dealToPricePayload ?? undefined}
                  >
                    このSKUの価格を見る
                  </a>
                </div>
              )}
            </li>
          );
        })}
      </ul>
      <noscript>
        <p class="small jp-copy">タグフィルタを利用するにはJavaScriptを有効にしてください。</p>
      </noscript>

      <p class="small jp-copy" style="margin-top:16px">価格・在庫は変動します。最新情報はリンク先でご確認ください。</p>

      <script type="module">
        const list = document.querySelector("[data-deal-list]");
        const countEl = document.querySelector("[data-deal-count]");
        const sortButtons = Array.from(document.querySelectorAll("[data-sort-button]"));
        const tagButtons = Array.from(document.querySelectorAll("[data-tag-filter]"));

        const items = list
          ? Array.from(list.querySelectorAll("[data-deal-item]")).map((el) => ({
              el,
              tags: (el.dataset.tags || "").split("|").filter(Boolean),
              timestamp: Number.parseInt(el.dataset.timestamp || "0", 10) || 0
            }))
          : [];

        let activeSort = "new";
        const activeTags = new Set();

        const formatCount = (visible) => {
          if (!countEl) return;
          const total = items.length;
          if (visible === total || activeTags.size === 0) {
            countEl.textContent = `全${total}件`;
          } else {
            countEl.textContent = `${visible}件を表示中`;
          }
        };

        const applySort = () => {
          if (!list) return;
          if (activeSort === "new") {
            items.sort((a, b) => b.timestamp - a.timestamp);
          }
          items.forEach(({ el }) => list.appendChild(el));
        };

        const applyFilters = () => {
          let visibleCount = 0;
          const selected = Array.from(activeTags.values());
          items.forEach((item) => {
            const matches = selected.length === 0 || selected.some((tag) => item.tags.includes(tag));
            if (matches) {
              item.el.removeAttribute("hidden");
              visibleCount += 1;
            } else {
              item.el.setAttribute("hidden", "");
            }
          });
          formatCount(visibleCount);
        };

        sortButtons.forEach((button) => {
          button.addEventListener("click", () => {
            if (button.getAttribute("aria-disabled") === "true") return;
            const sort = button.dataset.sort;
            if (!sort || sort === activeSort) return;
            activeSort = sort;
            sortButtons.forEach((btn) => {
              const isActive = btn === button;
              btn.classList.toggle("is-active", isActive);
              btn.setAttribute("aria-pressed", isActive ? "true" : "false");
            });
            applySort();
          });
        });

        tagButtons.forEach((button) => {
          button.addEventListener("click", () => {
            const tag = button.dataset.tag;
            if (!tag) return;
            const pressed = button.getAttribute("aria-pressed") === "true";
            if (pressed) {
              activeTags.delete(tag);
            } else {
              activeTags.add(tag);
            }
            button.setAttribute("aria-pressed", pressed ? "false" : "true");
            button.classList.toggle("is-active", !pressed);
            applyFilters();
          });
        });

        applySort();
        applyFilters();
      </script>
  </div>
  <Footer />
</Layout>
